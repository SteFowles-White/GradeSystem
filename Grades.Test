using System;
using Grades;
using Microsoft.VisualStudio.TestTools.UnitTesting;


/* A lot of these test are to test out concepts as I was learning refenceing and arrays with
 program */

namespace Grades.Test
{

    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void ArayUsed()
        {
            float[] grades;
            grades = new float[4];

            AddGrades(grades);

            Assert.AreEqual(89.5f, grades[1]);


        }

        private void AddGrades(float[] grades)
        {
            grades[1] = 89.5f;
        }

        [TestMethod]
        public void UppercaseString()
        {
            string name = "Stephen";
            name = name.ToUpper();

            Assert.AreEqual("STEPHEN", name);


        }
        [TestMethod]
        public void AddDaysToDateTime()
        {
            DateTime date = new DateTime(2017, 1, 1);
            date = date.AddDays(1);

            Assert.AreEqual(2, date.Day);
        }

        [TestMethod]
        public void ValuePassedByValue()
        {
            int x = 47;
            Increment(x);

            Assert.AreEqual(47, x);
        }

        private void Increment(int number)
        {
            number ++;

        }

        [TestMethod]
        public void ReferenceTypesPassByValue()
        {
            GradeBook book1 = new GradeBook();
            GradeBook book2 = book1;

            GiveBookAName(ref book2);
            Assert.AreEqual("A Grade Book", book1.Name2);

        }

        private void GiveBookAName(ref GradeBook book)
        {
            book.Name2 = "A Grade Book";
        }
        [TestMethod]
        public void StringComparisons()
        {
            string name1 = "Scott";
            string name2 = "scott";

            bool result = string.Equals(name1, name2, StringComparison.InvariantCultureIgnoreCase);
            Assert.IsTrue(result);

        }
        [TestMethod]
        public void ComputesHightestGrade()
        {
            GradeBook states = new GradeBook();
            states.AddGrade(10);
            states.AddGrade(90);
            states.AddGrade(50);

            GradeStatistics results = states.ComputeStatistics();
            Assert.AreEqual(90, results.HighestGrade);
        }

        [TestMethod]
        public void ComputesLowestGrade()
        {
            GradeBook states = new GradeBook();
            states.AddGrade(10);
            states.AddGrade(90);
            states.AddGrade(50);

            GradeStatistics results = states.ComputeStatistics();
            Assert.AreEqual(10, results.LowestGrade);
        }

        [TestMethod]
        public void ComputesAverageGrade()
        {
            GradeBook states = new GradeBook();
            states.AddGrade(10);
            states.AddGrade(90);
            states.AddGrade(53.5f);

            GradeStatistics results = states.ComputeStatistics();
            Assert.AreEqual(51.16, results.AverageGrade, .1);
        }

        [TestMethod]
        public void ReferenceTest()
        {
            GradeStatistics g1 = new GradeStatistics();
            GradeStatistics g2 = g1;

            g1.Name = "Stephen";

            g1 = new GradeStatistics();
            g1.Name = "jemma";

            Assert.AreNotEqual(g1, g2);

        }
        [TestMethod]
        public void VariablesGoldValue()
        {
            int x1 = 100;
            int x2 = 0;

            x1 = 2;

            Assert.AreNotEqual(x1, x2);
        }
    }
}
